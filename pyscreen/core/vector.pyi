from typing import overload

class IVector:...


class IVector2(IVector):
    @overload
    def __init__(self, x: int|float, y: int|float):
        pass

    @overload
    def __init__(self, xy: tuple):
        pass

    @property
    def x(self) -> float: ...

    @property
    def y(self) -> float: ...

    def asInts(self): ...
    def asFloats(self): ...

    def r90(self): ...
    def l90(self): ...

    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...

    def __eq__(self, other): ...
    def __ne__(self, other): ...

    def __str__(self): ...
    def __repr__(self): ...

    def __hash__(self): ...
    def __iter__(self): ...

    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...

    def angleBetween(self, other): ...
    def crossProduct(self, other): ...
    def dotProduct(self, other): ...



class IVector3(IVector):
    @overload
    def __init__(self, x: int|float, y: int|float, z: int|float):
        pass

    @overload
    def __init__(self, xyz: tuple):
        pass

    @property
    def x(self) -> float: ...

    @property
    def y(self) -> float: ...

    @property
    def z(self) -> float: ...

    def asInts(self): ...
    def asFloats(self): ...

    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __truediv__(self, other): ...

    def __eq__(self, other): ...
    def __ne__(self, other): ...

    def __str__(self): ...
    def __repr__(self): ...

    def __hash__(self): ...
    def __iter__(self): ...

    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...

    def crossProduct(self, other): ...
    def dotProduct(self, other): ...

    def roteteX(self, angle: float): ...
    def roteteY(self, angle: float): ...
    def roteteZ(self, angle: float): ...


class Vector2(IVector2):
    @overload
    def __init__(self, x: float, y: float):
        pass

    @overload
    def __init__(self, xy: tuple):
        pass

    @property
    def x(self) -> float: ...

    @property
    def y(self) -> float: ...



class Vector3(IVector3):
    @overload
    def __init__(self, x: float, y: float, z: float):
        pass

    @overload
    def __init__(self, xyz: tuple):
        pass

    @property
    def x(self) -> float: ...

    @property
    def y(self) -> float: ...

    @property
    def z(self) -> float: ...


class IntVector2(IVector2):
    @overload
    def __init__(self, x: int, y: int):
        pass

    @overload
    def __init__(self, xy: tuple):
        pass

    @property
    def x(self) -> int: ...

    @property
    def y(self) -> int: ...



class IntVector3(IVector3):
    @overload
    def __init__(self, x: int, y: int, z: int):
        pass

    @overload
    def __init__(self, xyz: tuple):
        pass

    @property
    def x(self) -> int: ...

    @property
    def y(self) -> int: ...

    @property
    def z(self) -> int: ...