from typing import Iterable, overload
from .angle import Angle
from .distance import Distance
from .vector import Vector2, Vector3



class Coordinate:
    def __init__(self, latitude:float = 0, longitude:float = 0):...

    @classmethod
    def fromStr(cls, latitude:str, longitude:str):...

    @property
    def latitude(self):...

    @property
    def longitude(self):...
    

    @overload
    def fromVector2(cls, vector:Vector2, gamemap):...
    @overload
    def fromVector2(cls, vector:Vector2, scale, center):...

    @classmethod
    def fromVector3(cls, vector:Vector3):...

    def pbd(self, bearing: Angle, distance: Distance, is_magnetic: bool = True):...
    def getPlaceByBearingDistance(self, bearing: Angle, distance: Distance, is_magnetic: bool = True):...

    def toVector2(self, gamemap) -> Vector2:...
    def toVector2IfVisible(self, gamemap) -> Vector2:...
    def toVector3(self) -> Vector3:...

    def _getInitialBearing(self, other):...

    def distance(self, other):...

    def quj(self, other):...
    def qte(self, other):...

    def getMagneticDeclination(self) -> Angle:...


    def getMagneticHeading(self, hdg: Angle) -> Angle:...

    def qdm(self, other) -> Angle:...
    def qdr(self, other) -> Angle:...

    def __hash__(self) -> int:...

    def __eq__(self, other) -> bool:...

    def copy(self):...

    def __add__(self, other):...
    def __radd__(self, other):...

    def __sub__(self, other):...
    def __rsub__(self, other):...


    def __mul__(self, other: int):...
    def __rmul__(self, other: int):...

    def __truediv__(self, other: int):...
    def __rtruediv__(self, other: int):...
    
    def serialize(self) -> dict:...
    
    @classmethod
    def deserialize(cls, data):...
    
    @property
    def angles(self) -> tuple[Angle, Angle]:...



def coordinatesFromVectors(map, *vectors: Vector2) -> Iterable[Coordinate]:...

def vectorsFromCoordinates(map, *coordinates: Coordinate) -> Iterable[Vector2]:...


